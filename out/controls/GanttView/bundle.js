/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./GanttView/GanttViewControl.tsx":
/*!****************************************!*\
  !*** ./GanttView/GanttViewControl.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GanttViewControl: () => (/* binding */ GanttViewControl)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nclass GanttViewControl extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      nameWidth: 250,\n      startWidth: 100,\n      endWidth: 100,\n      editingEnd: null,\n      endDateOverrides: {},\n      zoomLevel: \"year\",\n      containerWidth: 0,\n      sortField: \"name\",\n      sortDir: \"asc\"\n    };\n    this.onNameResizeStart = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.nameResizeInfo = {\n        startX: e.clientX,\n        startWidth: this.state.nameWidth\n      };\n      window.addEventListener(\"mousemove\", this.onNameResizeMove);\n      window.addEventListener(\"mouseup\", this.onNameResizeEnd);\n    };\n    this.onNameResizeMove = e => {\n      if (!this.nameResizeInfo) return;\n      var delta = e.clientX - this.nameResizeInfo.startX;\n      var w = this.nameResizeInfo.startWidth + delta;\n      var MIN = 150;\n      var MAX = 700; // updated maximum width per latest requirement\n      if (w < MIN) w = MIN;\n      if (w > MAX) w = MAX;\n      if (w !== this.state.nameWidth) {\n        this.setState({\n          nameWidth: w\n        });\n      }\n    };\n    this.onNameResizeEnd = () => {\n      this.nameResizeInfo = undefined;\n      window.removeEventListener(\"mousemove\", this.onNameResizeMove);\n      window.removeEventListener(\"mouseup\", this.onNameResizeEnd);\n      // Recenter after resize (slight delay to allow layout settle)\n      this.measureTimers.push(window.setTimeout(() => this.centerOnCurrentDate(), 60));\n    };\n    this.wrapperRef = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n    this.measureTimers = [];\n    this.updateContainerWidth = () => {\n      var el = this.wrapperRef.current;\n      if (el) {\n        // Measure parent width to avoid positive feedback with growing table width\n        var parentW = el.parentElement ? el.parentElement.clientWidth : 0;\n        var w = parentW || el.clientWidth || 0;\n        // Prevent oscillation: only update if actual change >2px\n        if (w && Math.abs(w - this.state.containerWidth) > 2) {\n          this.setState({\n            containerWidth: w\n          });\n        } else if (!w) {\n          // If width is 0 (not yet laid out), retry shortly\n          this.measureTimers.push(window.setTimeout(() => {\n            var ww = el.clientWidth || 0;\n            if (ww && Math.abs(ww - this.state.containerWidth) > 2) {\n              this.setState({\n                containerWidth: ww\n              });\n            }\n          }, 30));\n        }\n      }\n    };\n    this.onBarDragMove = e => {\n      var edit = this.state.editingEnd;\n      if (!edit) return;\n      var deltaPx = e.clientX - edit.startX;\n      var deltaPct = deltaPx / edit.containerPx * 100;\n      var liveWidthPct = edit.startWidthPct + deltaPct;\n      if (liveWidthPct < 1) liveWidthPct = 1;\n      if (liveWidthPct > 100 - edit.rowLeftPct) liveWidthPct = 100 - edit.rowLeftPct;\n      if (liveWidthPct !== edit.liveWidthPct) this.setState({\n        editingEnd: Object.assign(Object.assign({}, edit), {\n          liveWidthPct\n        })\n      });\n    };\n    this.onGlobalMouseUp = () => {\n      if (this.state.editingEnd) {\n        if (!this.props.adjustableEndDate) {\n          this.setState({\n            editingEnd: null\n          });\n          window.removeEventListener(\"mousemove\", this.onBarDragMove);\n          window.removeEventListener(\"mouseup\", this.onGlobalMouseUp);\n          return;\n        }\n        var edit = this.state.editingEnd;\n        var start = edit.winStart;\n        var end = edit.winEnd;\n        var totalMs = Number(end) - Number(start);\n        var rightPct = edit.rowLeftPct + edit.liveWidthPct;\n        var newEnd = new Date(Number(start) + rightPct / 100 * totalMs);\n        this.setState(prev => ({\n          editingEnd: null,\n          endDateOverrides: Object.assign(Object.assign({}, prev.endDateOverrides), {\n            [edit.rowId]: newEnd\n          })\n        }));\n        window.removeEventListener(\"mousemove\", this.onBarDragMove);\n        window.removeEventListener(\"mouseup\", this.onGlobalMouseUp);\n        this.props.onEndDateChange && this.props.onEndDateChange(edit.rowId, newEnd);\n      }\n    };\n    /**\r\n     * Takes the parameters and orders by parent child it and adds a level\r\n     * @returns an ordered list of gantt rows\r\n     */\n    this.orderGanttRows = () => {\n      var {\n        sortField,\n        sortDir\n      } = this.state;\n      var data = this.props.data.filter(r => r.name !== \"val\");\n      // Index children\n      var childrenMap = {};\n      data.forEach(r => {\n        var pid = r.parentId || \"\";\n        if (!childrenMap[pid]) childrenMap[pid] = [];\n        childrenMap[pid].push(r);\n      });\n      var compare = (a, b) => {\n        var dir = sortDir === \"asc\" ? 1 : -1;\n        var valFor = r => {\n          if (sortField === \"name\") return (r.name || \"\").toLowerCase();\n          if (sortField === \"startDate\") return r.startDate ? r.startDate.getTime() : Number.MAX_SAFE_INTEGER;\n          if (sortField === \"endDate\") return r.endDate ? r.endDate.getTime() : Number.MAX_SAFE_INTEGER;\n          return (r.name || \"\").toLowerCase();\n        };\n        var av = valFor(a);\n        var bv = valFor(b);\n        if (av < bv) return -1 * dir;\n        if (av > bv) return 1 * dir;\n        // tie-breaker stable by name then id\n        var an = (a.name || \"\").toLowerCase();\n        var bn = (b.name || \"\").toLowerCase();\n        if (an < bn) return -1;\n        if (an > bn) return 1;\n        return a.id.localeCompare(b.id);\n      };\n      var sortList = list => list.sort(compare);\n      var result = [];\n      var process = (row, level) => {\n        row.level = level;\n        row.milestones = [];\n        var kids = childrenMap[row.id] || [];\n        // separate milestones\n        var taskKids = [];\n        kids.forEach(k => {\n          if ((k.rowType || \"\").toLowerCase() === \"milestone\") row.milestones.push(k);else taskKids.push(k);\n        });\n        sortList(taskKids);\n        result.push(row);\n        taskKids.forEach(child => process(child, level + 1));\n      };\n      var roots = (childrenMap[\"\"] || []).filter(r => (r.rowType || \"\").toLowerCase() !== \"milestone\");\n      sortList(roots);\n      roots.forEach(r => process(r, 0));\n      return result;\n    };\n    this.toggleSort = field => {\n      this.setState(prev => {\n        if (prev.sortField === field) {\n          // toggle direction\n          var newDir = prev.sortDir === \"asc\" ? \"desc\" : \"asc\";\n          return Object.assign(Object.assign({}, prev), {\n            sortDir: newDir\n          });\n        }\n        return Object.assign(Object.assign({}, prev), {\n          sortField: field,\n          sortDir: \"asc\"\n        });\n      });\n    };\n    this.setZoom = z => {\n      if (this.state.zoomLevel !== z) {\n        this.setState({\n          zoomLevel: z\n        }, () => {\n          // Re-measure after zoom change for precise pixel widths.\n          // In Canvas apps, layout can settle a tick later; schedule a few retries.\n          this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 0));\n          this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 60));\n          this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 200));\n          // Recentering after zoom once sizes are likely stable\n          this.measureTimers.push(window.setTimeout(() => this.centerOnCurrentDate(), 120));\n        });\n      }\n    };\n    this.calculateStartX = date => {\n      if (!date) {\n        return -1;\n      }\n      var {\n        start,\n        end\n      } = this.getTimelineBounds();\n      if (date < start) {\n        return 0;\n      }\n      if (date > end) {\n        return -1;\n      }\n      var ratio = (Number(date) - Number(start)) / (Number(end) - Number(start));\n      return ratio * 100; // percentage\n    };\n    this.calculateStartXInWindow = (date, winStart, winEnd) => {\n      if (!date) return -1;\n      if (date < winStart) return 0;\n      if (date > winEnd) return -1;\n      var ratio = (Number(date) - Number(winStart)) / (Number(winEnd) - Number(winStart));\n      return ratio * 100;\n    };\n    this.calculateEndWidth = (startDate, endDate) => {\n      if (!startDate || !endDate) {\n        return -1;\n      }\n      var {\n        start,\n        end\n      } = this.getTimelineBounds();\n      if (endDate < start || startDate > end) {\n        return -1;\n      }\n      var clipStart = startDate < start ? start : startDate;\n      var clipEnd = endDate > end ? end : endDate;\n      if (clipEnd <= clipStart) {\n        return 2;\n      }\n      var widthRatio = (Number(clipEnd) - Number(clipStart)) / (Number(end) - Number(start));\n      return widthRatio * 100; // percentage\n    };\n    this.calculateEndWidthInWindow = (startDate, endDate, winStart, winEnd) => {\n      if (!startDate || !endDate) return -1;\n      if (endDate < winStart || startDate > winEnd) return -1;\n      var clipStart = startDate < winStart ? winStart : startDate;\n      var clipEnd = endDate > winEnd ? winEnd : endDate;\n      if (clipEnd <= clipStart) return 2;\n      var widthRatio = (Number(clipEnd) - Number(clipStart)) / (Number(winEnd) - Number(winStart));\n      return widthRatio * 100;\n    };\n    /**\r\n     * Creates the Gantt Table element.\r\n     * @returns teh table elements with the gantt table in it.\r\n     */\n    this.GanttTable = () => {\n      var _a, _b;\n      var {\n        start,\n        end\n      } = this.getTimelineBounds();\n      var segments = this.getSegments();\n      var {\n        nameWidth,\n        startWidth,\n        endWidth\n      } = this.state;\n      var isWeek = this.state.zoomLevel === \"week\";\n      // Sticky detail columns: subtract their total width from available timeline space\n      var fixedWidth = nameWidth + (this.props.expandDetails ? startWidth + endWidth : 0);\n      // Determine visible column count: month uses columnViewCount; week uses double columnViewCount; year shows all\n      var desiredVisible = this.state.zoomLevel === \"week\" || this.state.zoomLevel === \"month\" ? (() => {\n        var base = this.props.columnViewCount && this.props.columnViewCount > 0 ? this.props.columnViewCount : segments.length;\n        return this.state.zoomLevel === \"week\" ? base * 2 : base;\n      })() : segments.length;\n      var visibleCount = Math.max(1, Math.min(segments.length, desiredVisible));\n      // Compute per-segment width from available width in pixels (exact alignment)\n      // Prefer measured state width, fallback to live wrapper width in case state is stale during zoom swaps\n      var liveWrapper = this.wrapperRef.current;\n      var containerPx = this.state.containerWidth || (liveWrapper ? liveWrapper.clientWidth : 0) || 0;\n      var availablePx = Math.max(0, containerPx - fixedWidth);\n      // For week/month we want each segment sized so that exactly 'visibleCount' columns fit; remaining columns overflow (scrollable)\n      var segWidthPx = Math.max(8, Math.floor(availablePx / visibleCount));\n      if (segWidthPx > 160) segWidthPx = 160; // clamp\n      var perSegWidths;\n      if (this.state.zoomLevel === \"year\") {\n        // Fit year view exactly into available width with widths proportional to actual time span of each year\n        var totalMs = Number(end) - Number(start) || 1;\n        perSegWidths = segments.map((seg, i) => {\n          var segStart = seg.start;\n          var segEnd = i + 1 < segments.length ? segments[i + 1].start : end;\n          var segMs = Math.max(0, Number(segEnd) - Number(segStart));\n          var exact = availablePx * segMs / totalMs;\n          return Math.max(8, Math.floor(exact));\n        });\n        // Distribute remainder pixels (due to flooring) so sum equals availablePx\n        var sum = perSegWidths.reduce((a, b) => a + b, 0);\n        var remainder = availablePx - sum;\n        var ri = 0;\n        while (remainder !== 0 && perSegWidths.length) {\n          if (remainder > 0) {\n            perSegWidths[ri] += 1;\n            remainder--;\n          } else if (remainder < 0 && perSegWidths[ri] > 8) {\n            perSegWidths[ri] -= 1;\n            remainder++;\n          } else {\n            // If we can't shrink further, break to avoid infinite loop\n            break;\n          }\n          ri = (ri + 1) % perSegWidths.length;\n        }\n      } else {\n        // Month & Week: create scrollable width (do NOT force sum to availablePx)\n        perSegWidths = new Array(segments.length).fill(segWidthPx);\n      }\n      var tableWidthPx = fixedWidth + perSegWidths.reduce((a, b) => a + b, 0);\n      var maxTableWidth = containerPx * 3 + fixedWidth;\n      if (this.state.zoomLevel === 'year' && tableWidthPx > maxTableWidth) {\n        // Only constrain year view to avoid excessive horizontal scroll\n        var scale = (maxTableWidth - fixedWidth) / (tableWidthPx - fixedWidth);\n        perSegWidths = perSegWidths.map(w => Math.max(8, Math.floor(w * scale)));\n        var sum2 = perSegWidths.reduce((a, b) => a + b, 0);\n        var target = maxTableWidth - fixedWidth;\n        if (sum2 !== target && perSegWidths.length) {\n          perSegWidths[perSegWidths.length - 1] += target - sum2;\n        }\n        tableWidthPx = fixedWidth + perSegWidths.reduce((a, b) => a + b, 0);\n      }\n      // Build year pixel map for precise date alignment\n      var yearSegMeta = [];\n      var yearPixelTotal = 0;\n      if (this.state.zoomLevel === 'year') {\n        var cum = 0;\n        yearSegMeta = segments.map((s, i) => {\n          var segStart = s.start;\n          var segEnd = i + 1 < segments.length ? segments[i + 1].start : end;\n          var meta = {\n            start: segStart,\n            end: segEnd,\n            width: perSegWidths[i],\n            cum\n          };\n          cum += perSegWidths[i];\n          return meta;\n        });\n        if (yearSegMeta.length) {\n          var last = yearSegMeta[yearSegMeta.length - 1];\n          yearPixelTotal = last.cum + last.width;\n        }\n      }\n      var yearDateToPct = d => {\n        if (!d || !yearSegMeta.length) return -1;\n        if (d < yearSegMeta[0].start) return 0;\n        if (d > end) return -1;\n        for (var i = 0; i < yearSegMeta.length; i++) {\n          var m = yearSegMeta[i];\n          if (d < m.end || i === yearSegMeta.length - 1) {\n            var segDur = Number(m.end) - Number(m.start) || 1;\n            var inSeg = Math.min(segDur, Math.max(0, Number(d) - Number(m.start)));\n            var px = m.cum + m.width * inSeg / segDur;\n            return px / (yearPixelTotal || 1) * 100;\n          }\n        }\n        return -1;\n      };\n      var yearRangeToPct = (s, e) => {\n        if (!s || !e || !yearSegMeta.length) return null;\n        if (e < yearSegMeta[0].start || s > end) return null;\n        var clipStart = s < yearSegMeta[0].start ? yearSegMeta[0].start : s;\n        var clipEnd = e > end ? end : e;\n        if (clipEnd <= clipStart) return null;\n        var left = yearDateToPct(clipStart);\n        var right = yearDateToPct(clipEnd);\n        if (left < 0 || right < 0) return null;\n        var width = Math.max(right - left, 2 / (yearPixelTotal || 1) * 100);\n        return {\n          left,\n          width\n        };\n      };\n      var currentDateX = this.state.zoomLevel === 'year' ? yearDateToPct(this.props.currentDate) : this.calculateStartX(this.props.currentDate);\n      // Compute per-segment totals: number of project and tender rows overlapping each segment\n      var totals = segments.map((seg, i) => {\n        var segStart = seg.start;\n        var segEnd = i + 1 < segments.length ? segments[i + 1].start : end;\n        var project = 0;\n        var tender = 0;\n        this.props.data.forEach(r => {\n          if (!r || !r.startDate || !r.endDate) return;\n          var rType = (r.rowType || \"\").toLowerCase();\n          if (rType === \"milestone\") return; // ignore milestones for totals\n          if (rType === \"unknown\") return; // skip unknown types from per-segment totals\n          var effectiveEnd = this.state.endDateOverrides[r.id] || r.endDate;\n          // overlap if ranges intersect (inclusive)\n          if (r.startDate <= segEnd && effectiveEnd >= segStart) {\n            if (rType === \"tender\") tender += 1;else project += 1; // default bucket\n          }\n        });\n        return {\n          project,\n          tender\n        };\n      });\n      // Compute overall totals across the dataset (excluding milestones)\n      var overall = this.props.data.reduce((acc, r) => {\n        if (!r) return acc;\n        var t = (r.rowType || \"\").toLowerCase();\n        if (t === \"milestone\" || t === \"unknown\") return acc;\n        if (t === \"tender\") acc.tender += 1;else if (t === \"project\") acc.project += 1;\n        return acc;\n      }, {\n        project: 0,\n        tender: 0\n      });\n      var overallTotal = overall.project + overall.tender;\n      var overallPPct = overallTotal ? Math.round(overall.project / overallTotal * 100) : 0;\n      var overallTPct = overallTotal ? 100 - overallPPct : 0;\n      var tableStyle = {};\n      // For year view always fix the table width to the computed pixel sum to keep headers/body/bars aligned.\n      if (this.state.zoomLevel === 'year') {\n        tableStyle.width = tableWidthPx + 'px';\n      } else if (tableWidthPx > (this.state.containerWidth || 0)) {\n        // In scrollable (month/week) only set explicit width when it exceeds container.\n        tableStyle.width = tableWidthPx + 'px';\n      }\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", {\n        className: \"gantt-view-table\" + (isWeek ? \" is-week\" : \"\"),\n        style: tableStyle\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"thead\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"th\", {\n        className: \"sticky-col sticky-name\",\n        style: {\n          width: nameWidth + \"px\",\n          minWidth: 150,\n          maxWidth: 700,\n          position: \"sticky\",\n          left: 0,\n          zIndex: 5,\n          userSelect: this.nameResizeInfo ? \"none\" : undefined\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"sortable-header\",\n        style: {\n          position: \"relative\",\n          width: \"100%\",\n          paddingRight: 4\n        },\n        onClick: e => {\n          if (!e.target.classList.contains(\"col-resize-handle\") && !e.target.classList.contains(\"col-resize-grip\")) this.toggleSort(\"name\");\n        },\n        role: \"button\",\n        \"aria-label\": \"Sort by Project / Tender\",\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            this.toggleSort(\"name\");\n          }\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"header-label\"\n      }, \"Project / Tender\"), this.renderSortIcon(\"name\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"col-resize-handle\",\n        onMouseDown: this.onNameResizeStart,\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") {\n            e.preventDefault();\n            var delta = e.key === \"ArrowLeft\" ? -15 : 15;\n            var w = this.state.nameWidth + delta;\n            if (w < 150) w = 150;\n            if (w > 700) w = 700; // clamp to updated max\n            this.setState({\n              nameWidth: w\n            }, () => {\n              this.measureTimers.push(window.setTimeout(() => this.centerOnCurrentDate(), 60));\n            });\n          }\n        },\n        title: \"Drag to resize column\",\n        role: \"separator\",\n        \"aria-orientation\": \"vertical\",\n        \"aria-label\": \"Resize Project / Tender column\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"col-resize-grip\"\n      })))), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"th\", {\n        className: \"sticky-col sticky-start\",\n        style: {\n          width: startWidth + \"px\",\n          position: \"sticky\",\n          left: nameWidth,\n          zIndex: 5\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"sortable-header\",\n        onClick: () => this.toggleSort(\"startDate\"),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            this.toggleSort(\"startDate\");\n          }\n        },\n        \"aria-label\": \"Sort by Start Date\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"header-label\"\n      }, \"Start Date\"), this.renderSortIcon(\"startDate\")))), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"th\", {\n        className: \"sticky-col sticky-end\",\n        style: {\n          width: endWidth + \"px\",\n          position: \"sticky\",\n          left: nameWidth + startWidth,\n          zIndex: 5\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"sortable-header\",\n        onClick: () => this.toggleSort(\"endDate\"),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            this.toggleSort(\"endDate\");\n          }\n        },\n        \"aria-label\": \"Sort by End Date\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"header-label\"\n      }, \"End Date\"), this.renderSortIcon(\"endDate\")))), segments.map((seg, i) => {\n        var segWidthStyle = {\n          width: perSegWidths[i] + \"px\",\n          padding: \"0\",\n          fontSize: \"0.7rem\"\n        };\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"th\", {\n          key: i,\n          className: \"timeline-seg\",\n          style: segWidthStyle\n        }, seg.label);\n      }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", null, this.orderGanttRows().map((row, i) => {\n        var effectiveEnd = this.state.endDateOverrides[row.id] || row.endDate;\n        var leftPct = this.calculateStartX(row.startDate);\n        var widthPct = this.calculateEndWidth(row.startDate, effectiveEnd);\n        if (this.state.zoomLevel === 'year') {\n          var yr = yearRangeToPct(row.startDate, effectiveEnd);\n          if (yr) {\n            leftPct = yr.left;\n            widthPct = yr.width;\n          }\n        }\n        var liveWidth = widthPct;\n        if (this.state.editingEnd && this.state.editingEnd.rowId === row.id) liveWidth = this.state.editingEnd.liveWidthPct;\n        var isSelected = this.props.selectedId === row.id;\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", {\n          key: i,\n          className: isSelected ? \"active-row\" : undefined,\n          onClick: () => this.props.onSelect && this.props.onSelect(row.id, row.sourceId, row.rowType)\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n          className: \"sticky-col sticky-name\",\n          style: {\n            paddingLeft: (isWeek ? 8 : 15) + (row.level || 0) * (isWeek ? 14 : 20) + \"px\",\n            width: nameWidth + \"px\",\n            minWidth: 150,\n            maxWidth: 700,\n            position: \"sticky\",\n            left: 0,\n            zIndex: 4\n          },\n          onClick: () => this.props.onSelect && this.props.onSelect(row.id, row.sourceId, row.rowType)\n        }, row.name), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n          className: \"sticky-col sticky-start\" + (!row.startDate ? \" warn-blank\" : \"\"),\n          style: {\n            width: startWidth + \"px\",\n            position: \"sticky\",\n            left: nameWidth,\n            zIndex: 4\n          }\n        }, this.formatDateDDMMYYYY(row.startDate))), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n          className: \"sticky-col sticky-end\" + (!row.endDate ? \" warn-blank\" : \"\"),\n          style: {\n            width: endWidth + \"px\",\n            position: \"sticky\",\n            left: nameWidth + startWidth,\n            zIndex: 4\n          }\n        }, this.formatDateDDMMYYYY(row.endDate))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n          colSpan: segments.length,\n          className: \"gantt-bar-container timeline-cell\",\n          style: {\n            position: \"relative\",\n            padding: 0,\n            minHeight: 28\n          }\n        }, leftPct != -1 && widthPct != -1 && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"gantt-inline-bar\" + (this.state.editingEnd && this.state.editingEnd.rowId === row.id ? \" editing\" : \"\"),\n          style: {\n            left: leftPct + \"%\",\n            width: liveWidth + \"%\",\n            background: this.colorFor(row.rowType)\n          },\n          onClick: e => {\n            e.stopPropagation();\n            this.props.onSelect && this.props.onSelect(row.id, row.sourceId, row.rowType);\n          },\n          title: \"\".concat(row.name, \"\\n\").concat(this.formatDateDDMMYYYY(row.startDate), \" - \").concat(this.formatDateDDMMYYYY(effectiveEnd))\n        }, this.props.adjustableEndDate && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"bar-end-handle\",\n          onMouseDown: e => this.startBarEndEdit(e, row.id, leftPct, liveWidth, start, end),\n          role: \"slider\",\n          \"aria-label\": \"Adjust end date\",\n          \"aria-valuetext\": effectiveEnd === null || effectiveEnd === void 0 ? void 0 : effectiveEnd.toDateString()\n        })))), row.milestones.map((m, mi) => {\n          var mLeft = this.calculateStartX(m.startDate);\n          var mWidth = this.calculateEndWidth(m.startDate, m.endDate);\n          if (this.state.zoomLevel === 'year') {\n            var mr = yearRangeToPct(m.startDate, m.endDate);\n            if (mr) {\n              mLeft = mr.left;\n              mWidth = mr.width;\n            }\n          }\n          if (mLeft === -1 || mWidth === -1) return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            key: mi\n          });\n          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            key: mi,\n            className: \"milestone-wrapper\"\n          }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"milestone_bar\",\n            style: {\n              left: mLeft + \"%\",\n              width: mWidth + \"%\",\n              backgroundColor: this.colorFor(m.rowType) || undefined\n            }\n          }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"milestone_ends start\",\n            style: {\n              left: mLeft + \"%\"\n            }\n          }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"milestone_ends end\",\n            style: {\n              left: mLeft + mWidth + \"%\"\n            }\n          }));\n        }), currentDateX != -1 && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"currentdate\",\n          style: {\n            left: currentDateX + \"%\"\n          }\n        })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"timeline-grid\",\n          style: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            pointerEvents: \"none\"\n          }\n        }, segments.map((_, gi) => (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          key: gi,\n          className: \"grid-seg\",\n          style: {\n            width: perSegWidths[gi] + \"px\",\n            height: \"100%\",\n            position: \"relative\"\n          }\n        }))))));\n      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tfoot\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", {\n        className: \"gantt-totals-row\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n        className: \"sticky-col sticky-name\",\n        style: {\n          width: nameWidth + \"px\",\n          minWidth: 150,\n          maxWidth: 700,\n          position: \"sticky\",\n          left: 0,\n          zIndex: 10,\n          fontWeight: 600,\n          background: \"white\"\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: 8,\n          justifyContent: \"space-between\"\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"Totals\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n          minWidth: 120\n        }\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"tot-spark\",\n        \"aria-label\": \"Overall P \".concat(overall.project, \", T \").concat(overall.tender)\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"tot-spark-part project\",\n        style: {\n          width: overallPPct + \"%\",\n          background: ((_a = this.props.colors) === null || _a === void 0 ? void 0 : _a[0]) || \"#FFB74D\"\n        }\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"tot-spark-part tender\",\n        style: {\n          width: overallTPct + \"%\",\n          background: ((_b = this.props.colors) === null || _b === void 0 ? void 0 : _b[1]) || \"#90CAF9\"\n        }\n      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"tot-merged-pill overall\",\n        \"aria-label\": \"Totals Project \".concat(overall.project, \" Tender \").concat(overall.tender)\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"pill-label\"\n      }, \"P:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"pill-val\"\n      }, overall.project), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"pill-sep\"\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"pill-label\"\n      }, \"T:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"pill-val\"\n      }, overall.tender))))), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n        className: \"sticky-col sticky-start\",\n        style: {\n          width: startWidth + \"px\",\n          position: \"sticky\",\n          left: nameWidth,\n          zIndex: 10,\n          background: \"white\"\n        }\n      })), this.props.expandDetails && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n        className: \"sticky-col sticky-end\",\n        style: {\n          width: endWidth + \"px\",\n          position: \"sticky\",\n          left: nameWidth + startWidth,\n          zIndex: 10,\n          background: \"white\"\n        }\n      })), totals.map((t, i) => {\n        var _a, _b;\n        var total = t.project + t.tender;\n        var pPct = total ? Math.round(t.project / total * 100) : 0;\n        var tPct = total ? 100 - pPct : 0;\n        var projectColor = ((_a = this.props.colors) === null || _a === void 0 ? void 0 : _a[0]) || \"#FFB74D\";\n        var tenderColor = ((_b = this.props.colors) === null || _b === void 0 ? void 0 : _b[1]) || \"#90CAF9\";\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", {\n          key: i,\n          className: \"gantt-total-seg\",\n          style: {\n            width: perSegWidths[i] + \"px\",\n            padding: \"4px 4px\",\n            textAlign: \"center\",\n            fontSize: \"0.72rem\",\n            background: \"#f9fafb\"\n          },\n          title: \"Project: \".concat(t.project, \"  Tender: \").concat(t.tender)\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"tot-spark\",\n          \"aria-label\": \"P \".concat(t.project, \", T \").concat(t.tender)\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"tot-spark-part project\",\n          style: {\n            width: pPct + \"%\",\n            background: projectColor\n          }\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"tot-spark-part tender\",\n          style: {\n            width: tPct + \"%\",\n            background: tenderColor\n          }\n        })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n          className: \"tot-merged-pill\",\n          \"aria-label\": \"Project \".concat(t.project, \" Tender \").concat(t.tender)\n        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"pill-label\"\n        }, \"P:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"pill-val\"\n        }, t.project), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"pill-sep\"\n        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"pill-label\"\n        }, \"T:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n          className: \"pill-val\"\n        }, t.tender)));\n      }))));\n    };\n  }\n  renderSortIcon(field) {\n    var active = this.state.sortField === field;\n    var dir = this.state.sortDir;\n    var baseStyle = {\n      width: 12,\n      height: 12,\n      display: \"inline-block\"\n    };\n    if (!active) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"sort-icon inactive\",\n        \"aria-hidden\": \"true\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        viewBox: \"0 0 12 12\",\n        width: 12,\n        height: 12,\n        focusable: \"false\"\n      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M6 8.2L3.2 4h5.6L6 8.2z\",\n        fill: \"currentColor\",\n        opacity: \"0.35\"\n      })));\n    }\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"sort-icon \" + (dir === \"asc\" ? \"asc\" : \"desc\"),\n      \"aria-hidden\": \"true\",\n      style: baseStyle\n    }, dir === \"asc\" ? (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n      viewBox: \"0 0 12 12\",\n      width: 12,\n      height: 12,\n      focusable: \"false\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n      d: \"M6 3.2L9.5 8H2.5L6 3.2z\",\n      fill: \"currentColor\"\n    }))) : (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n      viewBox: \"0 0 12 12\",\n      width: 12,\n      height: 12,\n      focusable: \"false\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n      d: \"M6 8.8L2.5 4h7L6 8.8z\",\n      fill: \"currentColor\"\n    }))));\n  }\n  formatDateDDMMYYYY(d) {\n    if (!d || isNaN(new Date(d).getTime())) return \"Blank\";\n    var day = String(d.getDate()).padStart(2, \"0\");\n    var mon = String(d.getMonth() + 1).padStart(2, \"0\");\n    var yr = d.getFullYear();\n    return \"\".concat(day, \"/\").concat(mon, \"/\").concat(yr);\n  }\n  componentDidMount() {\n    // Initial measurement (initial nameWidth already 250 by default)\n    this.updateContainerWidth();\n    // Observe wrapper size changes using ResizeObserver when available\n    var RO = window.ResizeObserver;\n    var el = this.wrapperRef.current;\n    if (RO && el) {\n      this.resizeObserver = new RO(entries => {\n        var _a;\n        try {\n          var entry = entries && entries[0];\n          var w = ((_a = entry === null || entry === void 0 ? void 0 : entry.contentRect) === null || _a === void 0 ? void 0 : _a.width) ? Math.floor(entry.contentRect.width) : el.clientWidth || 0;\n          if (w && w !== this.state.containerWidth) {\n            this.setState({\n              containerWidth: w\n            });\n          }\n        } catch (_b) {}\n      });\n      try {\n        this.resizeObserver.observe(el);\n      } catch (_a) {}\n    }\n    // Fallback: also listen to window resize\n    window.addEventListener(\"resize\", this.updateContainerWidth);\n    // Defer a couple extra measurements to catch late layout/font loads\n    this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 0));\n    this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 50));\n    this.measureTimers.push(window.setTimeout(this.updateContainerWidth, 250));\n    // Center to current date shortly after mount (once sizes stabilize)\n    this.measureTimers.push(window.setTimeout(() => this.centerOnCurrentDate(), 100));\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateContainerWidth);\n    if (this.resizeObserver) {\n      try {\n        this.resizeObserver.disconnect();\n      } catch (_a) {}\n      this.resizeObserver = undefined;\n    }\n    // Clear any scheduled measurement timers\n    this.measureTimers.forEach(id => window.clearTimeout(id));\n    this.measureTimers = [];\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // Recenter when layout-affecting inputs change\n    var signature = this.buildCenterSignature();\n    if (signature !== this.lastCenterSignature) {\n      this.centerOnCurrentDate();\n      this.lastCenterSignature = signature;\n    }\n  }\n  buildCenterSignature() {\n    var segLen = this.getSegments().length;\n    return [this.state.zoomLevel, this.state.containerWidth, this.props.expandDetails ? 1 : 0, this.props.columnViewCount || 0, segLen, this.props.currentDate ? this.props.currentDate.toDateString() : \"\", this.state.sortField, this.state.sortDir].join(\"|\");\n  }\n  centerOnCurrentDate() {\n    var wrapper = this.wrapperRef.current;\n    if (!wrapper) return;\n    var segments = this.getSegments();\n    if (!segments.length) return;\n    var {\n      nameWidth,\n      startWidth,\n      endWidth\n    } = this.state;\n    // Detail columns are sticky; reserve their width so centering targets the timeline region only\n    var fixedWidth = nameWidth + (this.props.expandDetails ? startWidth + endWidth : 0);\n    var containerPx = this.state.containerWidth || wrapper.clientWidth || 0;\n    var desiredVisible = this.state.zoomLevel === \"week\" || this.state.zoomLevel === \"month\" ? (() => {\n      var base = this.props.columnViewCount && this.props.columnViewCount > 0 ? this.props.columnViewCount : segments.length;\n      // Week view shows double the month count\n      return this.state.zoomLevel === \"week\" ? base * 2 : base;\n    })() : segments.length; // year view shows all\n    var visibleCount = Math.max(1, Math.min(segments.length, desiredVisible));\n    var availablePx = Math.max(0, containerPx - fixedWidth);\n    var segWidthPx = Math.max(8, Math.floor(availablePx / visibleCount));\n    // For year view we distribute remainder pixels so total timeline width equals availablePx\n    var timelineWidth;\n    if (this.state.zoomLevel === \"year\") {\n      timelineWidth = availablePx; // we'll allocate across columns below for centering calc\n    } else {\n      timelineWidth = segWidthPx * segments.length;\n    }\n    var tableWidthPx = fixedWidth + timelineWidth;\n    var pct = this.calculateStartX(this.props.currentDate);\n    if (pct < 0) {\n      var {\n        start,\n        end\n      } = this.getTimelineBounds();\n      pct = this.props.currentDate < start ? 0 : 100;\n    }\n    var targetX = fixedWidth + pct / 100 * timelineWidth;\n    var viewport = wrapper.clientWidth || containerPx;\n    var desiredScroll = Math.max(0, Math.min(tableWidthPx - viewport, Math.floor(targetX - viewport / 2)));\n    try {\n      wrapper.scrollLeft = desiredScroll;\n    } catch (_a) {}\n  }\n  colorFor(rowType) {\n    var _a, _b;\n    var rt = (rowType || \"\").toLowerCase();\n    if (rt === \"tender\") return (_a = this.props.colors) === null || _a === void 0 ? void 0 : _a[1];\n    return (_b = this.props.colors) === null || _b === void 0 ? void 0 : _b[0];\n  }\n  // Column widths are static; no resize handlers\n  startBarEndEdit(e, rowId, rowLeftPct, rowWidthPct, winStart, winEnd) {\n    if (!this.props.adjustableEndDate) return; // editing disabled\n    e.preventDefault();\n    e.stopPropagation();\n    var cell = e.currentTarget.closest(\".gantt-bar-container\") || e.currentTarget.parentElement;\n    var containerPx = cell ? cell.clientWidth : 1;\n    this.setState({\n      editingEnd: {\n        rowId,\n        startX: e.clientX,\n        rowLeftPct,\n        startWidthPct: rowWidthPct,\n        liveWidthPct: rowWidthPct,\n        containerPx,\n        winStart,\n        winEnd\n      }\n    });\n    window.addEventListener(\"mousemove\", this.onBarDragMove);\n    window.addEventListener(\"mouseup\", this.onGlobalMouseUp);\n  }\n  // Helpers for month-based scaling\n  getTimelineBounds() {\n    // Determine min start and max end from dataset\n    var minStart = null;\n    var maxEnd = null;\n    this.props.data.forEach(r => {\n      if (r.startDate && (!minStart || r.startDate < minStart)) minStart = r.startDate;\n      if (r.endDate && (!maxEnd || r.endDate > maxEnd)) maxEnd = r.endDate;\n      // include milestones\n      r.milestones.forEach(m => {\n        if (m.startDate && (!minStart || m.startDate < minStart)) minStart = m.startDate;\n        if (m.endDate && (!maxEnd || m.endDate > maxEnd)) maxEnd = m.endDate;\n      });\n    });\n    if (!minStart) minStart = this.props.ganttStartDate;\n    if (!maxEnd) maxEnd = this.props.ganttEndDate;\n    // Normalize to month starts\n    var start = new Date(minStart.getFullYear(), minStart.getMonth(), 1);\n    var lastMonthStart = new Date(maxEnd.getFullYear(), maxEnd.getMonth(), 1);\n    var months = [];\n    var cursor = new Date(start.getTime());\n    while (cursor <= lastMonthStart) {\n      months.push(new Date(cursor.getTime()));\n      cursor.setMonth(cursor.getMonth() + 1);\n    }\n    if (months.length === 0) {\n      months.push(start);\n    }\n    var end = new Date(lastMonthStart.getFullYear(), lastMonthStart.getMonth() + 1, 0, 23, 59, 59, 999); // inclusive end (last day of max month)\n    return {\n      start,\n      end,\n      months\n    };\n  }\n  getSegments() {\n    var {\n      start,\n      end\n    } = this.getTimelineBounds();\n    var segments = [];\n    var z = this.state.zoomLevel;\n    if (z === \"month\") {\n      var cursor = new Date(start.getFullYear(), start.getMonth(), 1);\n      while (cursor <= end) {\n        segments.push({\n          start: new Date(cursor.getTime()),\n          label: cursor.toLocaleString(\"default\", {\n            month: \"short\"\n          }) + \" \" + (cursor.getFullYear() % 100).toString().padStart(2, \"0\")\n        });\n        cursor.setMonth(cursor.getMonth() + 1);\n      }\n    } else if (z === \"week\") {\n      // Move cursor to Monday of starting week\n      var _cursor = new Date(start.getTime());\n      var day = _cursor.getDay();\n      var diffToMonday = (day + 6) % 7; // 0 if Monday\n      _cursor.setDate(_cursor.getDate() - diffToMonday);\n      while (_cursor <= end) {\n        var wkStart = new Date(_cursor.getTime());\n        var oneJan = new Date(wkStart.getFullYear(), 0, 1);\n        var weekNum = Math.ceil(((wkStart - oneJan) / 86400000 + oneJan.getDay() + 1) / 7);\n        segments.push({\n          start: wkStart,\n          label: \"W\" + weekNum\n        });\n        _cursor.setDate(_cursor.getDate() + 7);\n      }\n    } else if (z === \"year\") {\n      // year segments\n      var y = start.getFullYear();\n      var lastY = end.getFullYear();\n      while (y <= lastY) {\n        var yStart = new Date(y, 0, 1);\n        segments.push({\n          start: yStart,\n          label: String(y)\n        });\n        y += 1;\n      }\n    }\n    if (segments.length === 0) segments.push({\n      start,\n      label: \"\"\n    });\n    return segments;\n  }\n  /**\r\n   * Renders the the Gantt View element\r\n   * @returns react node with the table element\r\n   */\n  render() {\n    var _a, _b;\n    var projectColor = (_a = this.props.colors) === null || _a === void 0 ? void 0 : _a[0];\n    var tenderColor = (_b = this.props.colors) === null || _b === void 0 ? void 0 : _b[1];\n    // Compute overall totals for header banner\n    var overallTotals = this.props.data.reduce((acc, r) => {\n      var t = (r.rowType || \"\").toLowerCase();\n      if (t === \"milestone\" || t === \"unknown\") return acc;\n      if (t === \"tender\") acc.tender += 1;else if (t === \"project\") acc.project += 1;else acc.project += 1; // default bucket\n      return acc;\n    }, {\n      project: 0,\n      tender: 0\n    });\n    var grandTotal = overallTotals.project + overallTotals.tender;\n    var projectPct = grandTotal ? overallTotals.project / grandTotal * 100 : 0;\n    var tenderPct = 100 - projectPct;\n    var rootStyle = {\n      color: this.props.fontColor || undefined,\n      fontSize: this.props.fontSize ? \"\".concat(this.props.fontSize, \"px\") : undefined\n    };\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-shell\",\n      style: rootStyle\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-header-bar\"\n    }, this.props.showFilters && this.props.filtersText && (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-filter-banner\",\n      \"aria-label\": \"Applied filter\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"filter-icon\",\n      \"aria-hidden\": \"true\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      width: \"16\",\n      height: \"16\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n      fill: \"currentColor\",\n      d: \"M3 4h18v2l-7 8v5l-4 2v-7L3 6V4z\"\n    }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"filter-label\"\n    }, \"Applied filter:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"filter-text\",\n      title: this.props.filtersText\n    }, this.props.filtersText))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-zoom-controls\"\n    }, [\"year\", \"month\", \"week\"].map(z => (/*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n      key: z,\n      onClick: () => this.setZoom(z),\n      className: \"gantt-zoom-btn\" + (this.state.zoomLevel === z ? \" active\" : \"\"),\n      type: \"button\"\n    }, z.charAt(0).toUpperCase() + z.slice(1))))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-legend\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-legend-item\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"gantt-legend-swatch\",\n      style: {\n        background: projectColor\n      }\n    }), \" \", \"Project\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-legend-item\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"gantt-legend-swatch\",\n      style: {\n        background: tenderColor\n      }\n    }), \" \", \"Tender\")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-total-banner\",\n      \"aria-label\": \"Totals Project \".concat(overallTotals.project, \" Tender \").concat(overallTotals.tender),\n      title: \"Project: \".concat(overallTotals.project, \"  Tender: \").concat(overallTotals.tender),\n      style: {\n        background: grandTotal ? \"linear-gradient(90deg, \".concat(projectColor || \"#FFB74D\", \" 0%, \").concat(projectColor || \"#FFB74D\", \" \").concat(projectPct, \"%, \").concat(tenderColor || \"#90CAF9\", \" \").concat(projectPct, \"%, \").concat(tenderColor || \"#90CAF9\", \" 100%)\") : undefined\n      }\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"tot-lab\"\n    }, \"P\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"tot-val\",\n      style: {\n        color: projectColor || \"#FFB74D\"\n      }\n    }, overallTotals.project), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"tot-sep\"\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"tot-lab\"\n    }, \"T\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n      className: \"tot-val\",\n      style: {\n        color: tenderColor || \"#90CAF9\"\n      }\n    }, overallTotals.tender))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n      className: \"gantt-table-wrapper\",\n      ref: this.wrapperRef\n    }, this.GanttTable()));\n  }\n}\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./GanttView/GanttViewControl.tsx?\n}");

/***/ }),

/***/ "./GanttView/index.ts":
/*!****************************!*\
  !*** ./GanttView/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GanttView: () => (/* binding */ GanttView)\n/* harmony export */ });\n/* harmony import */ var _GanttViewControl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GanttViewControl */ \"./GanttView/GanttViewControl.tsx\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass GanttView {\n  constructor() {\n    // Paging state (auto-load all pages)\n    this.pagingInitialized = false;\n    this.pagingSafetyCounter = 0; // safety guard (40 * 500 = 20k)\n  }\n  // No auxiliary drain function needed in simplified model\n  /**\r\n     * Empty constructor.\r\n    \r\n    constructor() { }\r\n    */\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   */\n  init(context, notifyOutputChanged, state) {\n    this.notifyOutputChanged = notifyOutputChanged;\n  }\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   * @returns ReactElement root react element for the control\r\n   */\n  updateView(context) {\n    var _a, _b, _c, _d, _e, _f;\n    var records = context.parameters.records;\n    // Simple sequential paging per provided reference snippet\n    try {\n      var paging = records.paging;\n      if (paging) {\n        if (!this.pagingInitialized && typeof paging.setPageSize === 'function') {\n          try {\n            paging.setPageSize(500);\n          } catch (_g) {}\n          this.pagingInitialized = true;\n        }\n        if (typeof paging.hasNextPage === 'function' && paging.hasNextPage()) {\n          if (this.pagingSafetyCounter < 40) {\n            this.pagingSafetyCounter++;\n            try {\n              paging.loadNextPage();\n            } catch (_h) {}\n          }\n        }\n      }\n    } catch (_j) {}\n    try {\n      console.log('[GanttView] Record count (all pages loaded):', records.sortedRecordIds.length);\n    } catch (_k) {}\n    var colorsRaw = context.parameters; // colors may be undefined\n    var colorsValue = (_b = (_a = colorsRaw.colors) === null || _a === void 0 ? void 0 : _a.raw) !== null && _b !== void 0 ? _b : undefined;\n    var parseColors = input => {\n      if (!input) return [];\n      var val = input.trim();\n      // Strip wrapping quotes\n      if (val.startsWith('\"') && val.endsWith('\"') || val.startsWith(\"'\") && val.endsWith(\"'\")) {\n        val = val.substring(1, val.length - 1).trim();\n      }\n      // JSON array style\n      if (val.startsWith(\"[\")) {\n        try {\n          var arr = JSON.parse(val);\n          if (Array.isArray(arr)) {\n            return arr.map(v => String(v).trim()).filter(v => v).map(v => v.replace(/^['\"]|['\"]$/g, \"\"));\n          }\n        } catch (e) {\n          // fall through to manual parsing\n        }\n        // Remove brackets / quotes\n        val = val.replace(/[\\[\\]\"]/g, \"\");\n      }\n      // Split on common separators\n      var parts = val.split(/[,;\\n\\|]/).map(s => s.trim()).filter(Boolean);\n      var cleaned = [];\n      for (var p of parts) {\n        // Accept formats like \"project:#FFA\", \"tender=#00F\", \"color: orange\"\n        var kv = p.split(/[:=]/);\n        var token = p;\n        if (kv.length >= 2) {\n          token = kv.slice(1).join(\":\"); // everything after first sep\n        }\n        token = token.replace(/^['\"]|['\"]$/g, \"\").trim();\n        // Drop leading words like 'project' or 'tender'\n        token = token.replace(/^(project|tender)\\s*/i, \"\").trim();\n        if (token) cleaned.push(token);\n      }\n      return cleaned;\n    };\n    var colors = parseColors(colorsValue);\n    // If labels are present, prefer them for mapping\n    var extractLabel = (src, label) => {\n      if (!src) return undefined;\n      var m = new RegExp(label + \"\\\\s*[:=]\\\\s*([^,;\\n|]+)\", \"i\").exec(src);\n      if (!m) return undefined;\n      return m[1].replace(/^['\"]|['\"]$/g, \"\").trim();\n    };\n    var labeledProject = extractLabel(colorsValue, \"project\");\n    var labeledTender = extractLabel(colorsValue, \"tender\");\n    // If control property not provided, try dataset column 'colors' (first record)\n    if (colors.length === 0 && records.sortedRecordIds.length) {\n      try {\n        var firstRow = records.records[records.sortedRecordIds[0]];\n        var datasetColorsVal = firstRow.getFormattedValue(\"colors\");\n        if (datasetColorsVal) {\n          colors = parseColors(datasetColorsVal);\n        }\n      } catch (_l) {}\n    }\n    // Ensure first two entries exist (project, tender) -> light orange, light blue\n    // Respect user order strictly: colors[0] = project, colors[1] = tender.\n    if (colors.length === 0 && !labeledProject && !labeledTender) {\n      colors = [\"#FFB74D\", \"#90CAF9\"]; // defaults\n    }\n    // Build final ordered colors honoring labels and user order\n    var projectColorFinal = labeledProject || colors[0] || \"#FFB74D\";\n    var tenderColorFinal = labeledTender || colors.find(c => c !== projectColorFinal) || \"#90CAF9\";\n    colors = [projectColorFinal, tenderColorFinal, ...colors.filter(c => c !== projectColorFinal && c !== tenderColorFinal)];\n    // Debug log final mapping\n    try {\n      console.log(\"[GanttView] Raw colors input:\", colorsValue, \"Mapped project/tender colors:\", colors[0], colors[1]);\n    } catch (_) {}\n    var parseDateOrNull = val => {\n      var s = (val !== null && val !== void 0 ? val : \"\").toString().trim();\n      if (!s) return null;\n      var ms = Date.parse(s);\n      if (isNaN(ms)) return null;\n      var d = new Date(ms);\n      return isNaN(d.getTime()) ? null : d;\n    };\n    console.log(\"Hellooo\");\n    // Build data rows from dataset only\n    var dataRows = records.sortedRecordIds.map((sortedRowID, i) => {\n      var inputRow = records.records[sortedRowID];\n      var recordId = inputRow.getRecordId ? inputRow.getRecordId() : String(sortedRowID || i);\n      var sourceIdVal = inputRow.getFormattedValue(\"id\");\n      var parseDateOrNull = val => {\n        var s = (val !== null && val !== void 0 ? val : '').toString().trim();\n        if (!s) return null;\n        var ms = Date.parse(s);\n        if (isNaN(ms)) return null;\n        var d = new Date(ms);\n        return isNaN(d.getTime()) ? null : d;\n      };\n      return {\n        id: recordId,\n        sourceId: sourceIdVal,\n        name: inputRow.getFormattedValue(\"name\"),\n        assigned: inputRow.getFormattedValue(\"assigned\"),\n        startDate: parseDateOrNull(inputRow.getFormattedValue(\"startDate\")),\n        endDate: parseDateOrNull(inputRow.getFormattedValue(\"endDate\")),\n        rowType: (() => {\n          var raw = inputRow.getFormattedValue(\"rowType\");\n          var norm = (raw || \"\").toString().trim().toLowerCase();\n          norm = norm.replace(/[^a-z]/g, \"\");\n          if (norm !== \"project\" && norm !== \"tender\" && norm !== \"milestone\") {\n            var nameVal2 = (inputRow.getFormattedValue(\"name\") || \"\").toLowerCase();\n            if (nameVal2.includes(\"tender\")) norm = \"tender\";else norm = \"unknown\";\n          }\n          return norm;\n        })(),\n        progress: parseFloat(inputRow.getFormattedValue(\"progress\")),\n        parentId: inputRow.getFormattedValue(\"parentId\") ? inputRow.getFormattedValue(\"parentId\") : \"\",\n        level: null,\n        milestones: []\n      };\n    });\n    var props = {\n      name: \"Project Tender Timeline\",\n      ganttStartDate: context.parameters.ganttStartDate.raw || new Date(),\n      ganttEndDate: context.parameters.ganttEndDate.raw || new Date(),\n      currentDate: context.parameters.currentDate.raw || new Date(),\n      expandDetails: context.parameters.expandDetails.raw,\n      columnViewCount: (_d = (_c = context.parameters.columnViewCount) === null || _c === void 0 ? void 0 : _c.raw) !== null && _d !== void 0 ? _d : undefined,\n      showFilters: ((_e = context.parameters.showFilters) === null || _e === void 0 ? void 0 : _e.raw) || false,\n      filtersText: ((_f = context.parameters.filtersText) === null || _f === void 0 ? void 0 : _f.raw) || '',\n      data: dataRows,\n      colors: colors,\n      selectedId: this.selectedUid,\n      onSelect: (uid, dataId, rowType) => {\n        this.selectedUid = uid; // highlight\n        if (dataId !== undefined && dataId !== null && String(dataId).length > 0) {\n          this.selectedId = String(dataId);\n        } else {\n          // fallback to uid if source id is not present\n          this.selectedId = uid;\n        }\n        this.selectedRowType = rowType || undefined;\n        try {\n          console.log(\"[GanttView] Selected UID:\", uid, \"Output ID:\", this.selectedId, \"RowType:\", this.selectedRowType);\n        } catch (_a) {}\n        this.notifyOutputChanged && this.notifyOutputChanged();\n      }\n    };\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1__.createElement(_GanttViewControl__WEBPACK_IMPORTED_MODULE_0__.GanttViewControl, props);\n  }\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n  getOutputs() {\n    return {\n      selectedId: this.selectedId,\n      selectedRowType: this.selectedRowType\n    };\n  }\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  destroy() {\n    // Add code to cleanup control if necessary\n  }\n}\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./GanttView/index.ts?\n}");

/***/ }),

/***/ "react":
/*!***************************!*\
  !*** external "Reactv16" ***!
  \***************************/
/***/ ((module) => {

module.exports = Reactv16;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./GanttView/index.ts");
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('impactplumbing.gantt.GanttView', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.GanttView);
} else {
	var impactplumbing = impactplumbing || {};
	impactplumbing.gantt = impactplumbing.gantt || {};
	impactplumbing.gantt.GanttView = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.GanttView;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}